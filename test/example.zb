# Specify we're using big endian for the protocol
@endian big

# Specify that we're describing a protocol from the input direction
# If this is set to output, then the direction of the protocol will be
# flipped, and the protocol will be used to encode data instead of decode
@direction in

@state {
    Handshake: 0,
    Status: 1,
    Login: 2,
    Play: 3,
}

# Base Packet
@packet {
    len: VarInt,
    data: ProtoData,
}

# Packet in compressed mode
@packet : Compressed(gzip) {
    len: VarInt,
    uncompressedLen: VarInt,
    data: ProtoData,
}

# Packet in compressed and encrypted mode
@packet : Compressed(gzip), Encrypted(aes256) {
    len: VarInt,
    uncompressedLen: VarInt,
    data: ProtoData, # Decompress then Decrypt
}

# This is just regular data
Vec3 {
    x: f64,
    y: f64,
    z: f64,
}

# This is an enum with backing type
WeatherType : Enum(u8) {
    Sunny: 1,
    Cloudy: 2,
    Rainy: 3,
}

# This is an event with ID 47
# This packet only works in the play state
PlayerPositionUpdate : Out(47) State(Play) {
    id: u32,
    pos: Vec3,
    teleport: bool,
}

# This is an event with ID 47
# This packet only works in the play state
PlayerPositionUpdate : In(47) State(Play) {
    id: u32,
    pos: Vec3,
}

# This is an event with ID 2
# This packet only works in the play state
EnvironmentTick : InOut(2) State(Play) {
    time: u64,
    weather: WeatherType,
}

# This is an event with ID 1
# The conflict with the playerPositionUpdate event is resolved by
# the state of the packet, since this packet is in the Handshake state
# and the playerPositionUpdate packet is in the play state
# This packet only works in the Handshake state
Handshake: Out(1) State(Handshake) {
    protocolVersion: VarInt,
#    serverAddress: string,
    serverPort: u16,
    nextState: u8,
}

# This is the data segment of the packet
ProtoData {
    kind: u8,
    event: Event(kind) # Match to kind
}